<?xml version="1.0"?>
<ruleset name="TheWebSolver WordPress Development Coding Standards">
	<!-- See https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->
	<!-- See https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards -->
	<!-- See https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki -->
	<!-- See https://github.com/wimg/PHPCompatibility -->
	<!-- See https://tommcfarlin.com/php-codesniffer/ -->
	<!-- See https://tommcfarlin.com/php-codesniffer-in-visual-studio-code/ -->

	<!-- Set a description for this ruleset. -->
	<description>A custom set of code standard rules to check for WordPress development.</description>


	<!--
	#############################################################################
	COMMAND LINE ARGUMENTS
	https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
	#############################################################################
	-->

	<!-- Pass some flags to PHPCS:
		 p flag: Show progress of the run.
		 s flag: Show sniff codes in all reports.
		 v flag: Print verbose output.
		 n flag: Do not print warnings.
	-->
	<arg value="psvn"/>

	<!-- Check up to 8 files simultanously. -->
	<arg name="parallel" value="8"/>

	<!--
		Only check the PHP, CSS and SCSS files.
		JS files are checked separately with ESLint.
	-->
	<arg name="extensions" value="php,css,scss/css"/>

	<!-- Check all files in this directory and the directories below it. -->
	<file>.</file>

	<!-- Directories to exclude. -->
	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*/vendor/*</exclude-pattern>

	<!--
	#############################################################################
	USE THE WordPress-Coding-Standards RULESET
	#############################################################################
	-->

	<rule ref="WordPress"/>
	<rule ref="WordPress-Core" />
	<rule ref="WordPress-Docs" />
	<rule ref="WordPress-Extra" />

	<!--
	#############################################################################
	SNIFF SPECIFIC CONFIGURATION

	https://github-wiki-see.page/m/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties
	#############################################################################
	-->

	<!--
		Verify that the text_domain is set to the desired text-domain.
		Multiple valid text domains can be provided as a comma-delimited list.

		Add as many elements to support multiple text domains.
	-->
	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="tws-codegarage"/>
			</property>
		</properties>
	</rule>

	<!--
		Allow for named specific exceptions to the file name rules based
		 on the directory hierarchy and ensure PSR-4 autoloading compatibility.
		 - Remove strict class file name requirement.
		 - Remove no hyphenated lowercase requirement.
	-->
	<rule ref="WordPress.Files.FileName">
		<properties>
			<property name="strict_class_file_names" value="false" />
			<!-- Enable if developing a theme. -->
			<!-- <property name="is_theme" value="true"/> -->
		</properties>
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase" />
	</rule>

	<!--
		Set the minimum supported WP version. This is used by several sniffs.
		The minimum version set here should be in line with the minimum WP version
		as set in the "Requires at least" tag in the readme.txt file.
	-->
	<config name="minimum_supported_wp_version" value="5.3"/>

	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<!-- No need to adjust alignment of large arrays when the item with the largest key is removed. -->
			<property name="exact" value="false"/>
			<!-- Don't align multi-line items if ALL items in the array are multi-line. -->
			<property name="alignMultilineItems" value="!=100"/>
			<!-- Array assignment operator should always be on the same line as the array key. -->
			<property name="ignoreNewlines" value="false"/>
		</properties>
	</rule>

	<!--
		Since this happens rarely, we are whitelisting below sniffs.
		- When multiple variables need to be assigned the same value.
		- When variable needs to be assigned in the condition.
	-->
	<rule ref="WordPress.CodeAnalysis.AssignmentInCondition">
		<!--
			Allow variable assignment in the condition.
			Eg: if( $x = file_exists( $y ) ) { require $x; }
		-->
		<exclude name="WordPress.CodeAnalysis.AssignmentInCondition.Found" />
	</rule>

	<rule ref="Squiz.PHP.DisallowMultipleAssignments">
		<!--
			Allow assignment in the control structure.
			Eg: if( $x = adding( $y + $z ) > 0 ) { return $x; }
		-->
		<exclude name="Squiz.PHP.DisallowMultipleAssignments.FoundInControlStructure" />

		<!--
			Allow multiple assignment in the same line.
			Eg: $x = $y = 'value'
		-->
		<exclude name="Squiz.PHP.DisallowMultipleAssignments.Found" />
	</rule>

	<rule ref="WordPress.PHP.DisallowShortTernary">
		<!--
			Allow short ternary operator.
			Eg: $x ?: $y
		-->
		<exclude name="WordPress.PHP.DisallowShortTernary.Found" />
	</rule>

	<!--
	#############################################################################
	USE THE PHPCompatibility RULESET
	#############################################################################
	-->

	<config name="testVersion" value="7.0-99.0"/>
	<rule ref="PHPCompatibility" />

</ruleset>
